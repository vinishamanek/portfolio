---
import Sudoku from '../components/sudoku.astro';

interface Props {
  title?: string;
}

const { title = 'vinisha manek' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="flower.svg"/>
  </head>
  <body>
    <div id="main-content">
      <slot />
    </div>
    
  <button id="sudoku-flower" aria-label="Play Sudoku">
    <img src="/flower.svg" alt="flower" />
  </button>
  <Sudoku client:load />
  </body>
</html>

<style is:global>
  * {
    box-sizing: border-box;
  }

  body {
    margin: 0;
    padding: 0;
    background: #2C1404;
    color: white;
    font-family: Helvetica, Arial, sans-serif;
    min-height: 100vh;
    overflow-x: hidden;
  }

  a {
    color: white;
    text-decoration: none;
  }

  a:hover {
    text-decoration: underline;
  }

  #main-content {
    transition: opacity 0.3s ease;
  }

  body.sudoku-active #main-content {
    pointer-events: none;
  }

  #sudoku-flower {
    position: fixed;
    right: 1.5rem;
    bottom: 1.5rem;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
    line-height: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s ease;
    z-index: 1000;
  }

  #sudoku-flower img {
    width: 50px;
    height: 50px;
    display: block;
  }

  #sudoku-flower:hover {
    transform: scale(1.2) rotate(20deg);
  }

  #sudoku-flower:active {
    transform: scale(0.95);
  }

  #sudoku-flower:focus {
    outline: none;
  }

  #sudoku-flower.animating {
    opacity: 0;
    pointer-events: none;
  }

  .flower-clone {
    position: fixed;
    z-index: 10002;
    pointer-events: none;
    transition: all 1.4s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .flower-clone img {
    width: 50px;
    height: 50px;
    display: block;
  }

  .flower-particle {
    position: fixed;
    width: 56px;
    height: 56px;
    pointer-events: none;
    z-index: 10005;
    transition: transform 1600ms cubic-bezier(0.16, 1, 0.3, 1), opacity 1600ms ease-out;
    will-change: transform, opacity;
    filter: drop-shadow(0 6px 18px rgba(0,0,0,0.35));
  }

  .flower-particle img { width: 100%; height: 100%; display: block; }

  @media (max-width: 640px) {
    #sudoku-flower img {
      width: 40px;
      height: 40px;
    }

    .flower-clone img {
      width: 40px;
      height: 40px;
    }
  }
</style>

<script>
  const flower = document.getElementById('sudoku-flower');
  const sudokuScreen = document.getElementById('sudoku-screen');
  
  document.addEventListener('sudoku-opening', () => {
    if (!flower) return;
    
    const rect = flower.getBoundingClientRect();
    
    const clone = document.createElement('div');
    clone.className = 'flower-clone';
    clone.innerHTML = flower.innerHTML; // Copy the img element
    clone.style.left = `${rect.left + rect.width / 2}px`;
    clone.style.top = `${rect.top + rect.height / 2}px`;
    clone.style.transform = 'translate(-50%, -50%)';
    document.body.appendChild(clone);
    
    flower.classList.add('animating');
    
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        const centerX = window.innerWidth / 2;
        const centerY = window.innerHeight / 2;
        
        clone.style.left = `${centerX}px`;
        clone.style.top = `${centerY}px`;
        clone.style.transform = 'translate(-50%, -50%) scale(6) rotate(360deg)';
        clone.style.opacity = '0';
      });
    });
    
    // Clean up
    setTimeout(() => {
      clone.remove();
      flower.classList.remove('animating');
    }, 1400);
  });
  
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'hidden') {
        const target = mutation.target;
        if (target && target.hidden) {
          document.body.classList.remove('sudoku-active');
        } else {
          document.body.classList.add('sudoku-active');
        }
      }
    });
  });

  if (sudokuScreen) {
    observer.observe(sudokuScreen, { attributes: true });
  }

  document.addEventListener('intro-finished', () => {
    console.log('[layout] intro-finished received');
    try {
      createFlowerExplosion(18);
    } catch (err) {
      console.error('createFlowerExplosion error', err);
    }
  });

  function createFlowerExplosion(count = 12) {
    const centerX = window.innerWidth / 2;
    const centerY = window.innerHeight / 2;

    for (let i = 0; i < count; i++) {
      const p = document.createElement('div');
      p.className = 'flower-particle';
      p.style.left = `${centerX}px`;
      p.style.top = `${centerY}px`;
      // small initial size, will grow as it flies
      p.style.transform = 'translate(-50%, -50%) scale(0.6)';
      p.style.opacity = '1';
      p.innerHTML = `<img src="/flower.svg" alt="flower" />`;
      document.body.appendChild(p);

      const angle = (Math.PI * 2 * i) / count + (Math.random() - 0.5) * 0.8;
      const dist = 160 + Math.random() * 360; // wider spread
      const tx = Math.cos(angle) * dist;
      const ty = Math.sin(angle) * dist - (Math.random() * 40);
      const rot = (Math.random() - 0.5) * 720;
      const finalScale = 1 + Math.random() * 1.4; // grow to between 1 and 2.4

      setTimeout(() => {
        p.style.transform = `translate(${tx}px, ${ty}px) scale(${finalScale}) rotate(${rot}deg)`;
        p.style.opacity = '0';
      }, Math.random() * 220);

      // remove after animation finishes (longer)
      setTimeout(() => p.remove(), 1800 + Math.random() * 900);
    }
  }
</script>